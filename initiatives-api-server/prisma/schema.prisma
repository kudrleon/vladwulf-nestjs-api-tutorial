// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  requests Request[]
  questionAnswers QuestionAnswer[]

  @@map("users")
}

model Questionnaire {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  sections QuestionnaireSection[]

  requests Request[]

  @@map("questionnaires")
}

model QuestionnaireSection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  questionnaireId Int
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])

  questions Question[]

  @@map("questionnaireSections")
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String

  questionnaireSectionId Int
  questionnaireSection   QuestionnaireSection @relation(fields: [questionnaireSectionId], references: [id])

  questionAnswers QuestionAnswer[]

  @@map("questions")
}

model Request {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user User @relation(fields: [userId], references: [id])

  businessOwner String

  title       String

  summary     String

  questionnaireId Int?
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])

  answers QuestionAnswer[]

  @@map("requests")
}

model QuestionAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user User @relation(fields: [userId], references: [id])

  requestId String
  request   Request @relation(fields: [requestId], references: [id])

  questionId Int
  question Question @relation(fields: [questionId], references: [id])

  answer String

  @@map("qustionAnswers")
}